// ADOBE CONFIDENTIAL
// Copyright 2024 Adobe
// All Rights Reserved.
//
// NOTICE: All information contained herein is, and remains
// the property of Adobe and its suppliers, if any. The intellectual
// and technical concepts contained herein are proprietary to Adobe
// and its suppliers and are protected by all applicable intellectual
// property laws, including trade secret and copyright laws.
// Dissemination of this information or reproduction of this material
// is strictly forbidden unless prior written permission is obtained
// from Adobe.

import { Crypto } from '@peculiar/webcrypto';
import * as x509 from '@peculiar/x509';
import { createHash } from 'node:crypto';
import fs from 'node:fs/promises';

const crypto = new Crypto();
x509.cryptoProvider.set(crypto);

const PEM_INPUT_PATH = 'static/trust/allowed.pem';
const HASH_OUTPUT_PATH = 'static/trust/allowed.sha256.txt';
const HEADER = `## The C2PA intends to publish an official C2PA Public Trust List. Until that time, this temporary known certificate list for use by the verifier at https://contentcredentials.org/verify. The list is subject to change, and will be deprecated.
##
## This file is autogenerated and contains SHA-256 hashes of the certificates contained in https://contentcredentials.org/trust/allowed.pem in order to save bandwidth.
##`;

// Based off of [RFC-7468](https://datatracker.ietf.org/doc/html/rfc7468)
// This adds a bit of leeway if people add more than 5 dashes on the sides of `BEGIN/END CERTIFICATE`
const PEM_REGEX =
  /(?:#\s((?:O|CN)=.*)\n)?(?:-{5,}BEGIN CERTIFICATE-{5,}\n)([A-Za-z0-9+/\n]*={0,3})\n(?:-{5,}END CERTIFICATE-{5,})/gm;

const validIssuers = [
  'DigiCert\\, Inc.',
  'DigiCert Inc',
  'Entrust\\, Inc.',
  'GlobalSign nv-sa',
  'SSL Corp',
  'Truepic',
];

async function run() {
  console.log('Processing end-entity certificates...');
  console.log('Valid issuers:', JSON.stringify(validIssuers));
  const now = new Date();
  const pemBuffer = await fs.readFile(PEM_INPUT_PATH);
  // Normalize UNIX/Windows line endings so we don't have to deal with them downstream
  const pemData = pemBuffer.toString().replaceAll('\r\n', '\n');
  const certs = Array.from(pemData.matchAll(PEM_REGEX))?.map(
    ([, org, b64Cert]) => {
      const certStart = b64Cert.substring(0, 12);

      if (!org) {
        console.error(
          `ERROR: End-entity cert starting with ${certStart} added without starting org/common name comment (starting with O= or CN=) - stopping.`,
        );
        process.exit(1);
      }

      console.log(`Processing ${org}`);
      const hash = createHash('sha256');
      const buf = Buffer.from(b64Cert, 'base64');
      const cert = new x509.X509Certificate(buf);

      // Make sure the comment matches the subject
      if (cert.subject.indexOf(org) < 0) {
        console.error(
          `ERROR: ${org} end-entity cert starting with ${certStart} did not find identifier in certificate subject - found ${cert.subject} - stopping.`,
        );
        process.exit(1);
      }

      // Make sure we have a valid issuer
      if (!validIssuers.some((vi) => cert.issuer.indexOf(`O=${vi}`) > -1)) {
        console.error(
          `ERROR: ${org} end-entity cert starting with ${certStart} does not have an allowed issuer - found ${cert.issuer} - stopping.`,
        );
        process.exit(1);
      }

      // Log GitHub Actions notice if this certificate is outside of the validity period
      if (now < cert.notBefore || now > cert.notAfter) {
        console.log(
          `::notice::${org} end-entity cert starting with ${certStart} is expired (expired ${cert.notAfter})`,
        );
      }

      const basicConstraints = cert.getExtension(
        x509.BasicConstraintsExtension,
      );

      // Check that this is an end-entity cert
      if (basicConstraints?.ca) {
        console.error(
          `ERROR: ${org} end-entity cert starting with ${certStart} can not have a basic constraint of CA:TRUE - stopping.`,
        );
        process.exit(1);
      }

      hash.update(buf);

      const digest = hash.digest('base64');

      console.log(`Succesfully processed end-entity cert for ${org}`);

      return [`# ${org.replace(/^O=/, '')}`, digest].join('\n');
    },
  );

  const contents = `${HEADER}\n\n${certs.join('\n')}`;
  await fs.writeFile(HASH_OUTPUT_PATH, contents);

  console.log(`Finished processing ${certs.length} end-entity certificates`);
}

run();
